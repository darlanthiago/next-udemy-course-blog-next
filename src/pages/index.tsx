/* eslint-disable @next/next/no-img-element */
import type { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import Prismic from "@prismicio/client";
import { getPrismicClient } from "../services/prismic";
import { RichText } from "prismic-dom";
import styles from "../styles/Home.module.css";
import PostCard from "../components/PostCard";
import { useRouter } from "next/router";
import { getOneDay } from "../utils/date";

type Post = {
  slug: string;
  title: string;
  subtitle: string;
  cover: {
    url: string;
    alt?: string;
  };
  published_at: string;
  updated_at: string;
};

interface PostProps {
  posts: Post[];
}

const Home = ({ posts }: PostProps) => {
  const router = useRouter();

  if (router.isFallback) {
    return <div>Loading...</div>;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Blog Curso Udemy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {posts.map((post, index) => (
          <PostCard post={post} key={index} />
        ))}
      </main>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async (ctx) => {
  const prismic = await getPrismicClient();

  const response = await prismic.query(
    [Prismic.predicates.at("document.type", "post")],
    {
      fetch: ["publication.title", "publication.content", "publication.author"],
      pageSize: 100,
      orderings: "[document.first_publication_date desc]",
    }
  );

  if (!response.results) {
    return {
      notFound: true,
    };
  }

  const posts = response.results.map((post: any) => {
    return {
      slug: post.uid,
      title: RichText.asText(post.data.title),
      subtitle: RichText.asText(post.data.resume),
      cover: {
        url: post.data.cover.url,
        alt: post.data.cover.alt,
      },
      published_at: new Date(post.first_publication_date).toLocaleDateString(
        "pt-BR",
        {
          day: "2-digit",
          month: "long",
          year: "numeric",
        }
      ),
      updated_at: new Date(post.last_publication_date).toLocaleDateString(
        "pt-BR",
        {
          day: "2-digit",
          month: "long",
          year: "numeric",
        }
      ),
    };
  });

  return {
    props: { posts },
    revalidate: getOneDay(),
  };
};

export default Home;
